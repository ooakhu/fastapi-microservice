from fastapi import FastAPI
from fastapi.background import BackgroundTasks
from redis_om import get_redis_connection, HashModel
from fastapi.middleware.cors import CORSMiddleware
from starlette.requests import Request
import requests, time

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8000"],
    allow_methods=['*'],
    allow_headers=['*']
)

#use different database
redis = get_redis_connection(
    host="redis-18359.c55.eu-central-1-1.ec2.cloud.redislabs.com",
    port=18359,
    password="LpIdwtjrccpEqELdECYwbXvTBglbTJgF",
    decode_responses=True
)

class Order(HashModel):
    product_id: str
    price: float
    fee: float
    total: float
    quantity: int
    status: str #pending,completed or refunded


    class Meta:
        database = redis

@app.get('/orders/{pk}') #to check the status of the order and other details
def get(pk: str):
    return Order.get(pk)


@app.post('/orders') #sending just id and quantity with this request
async def create(request: Request, background_tasks: BackgroundTasks):
    body = await request.json()
    req = requests.get('http://localhost:8000/products/%s' % body['id']) #we make a request to the products api and add the body of our order request to it
    product = req.json()
    order = Order(
        name=product['name'],
        product_id=body['id'],
        price=product['price'],
        fee=0.2*product['price'],
        total = 1.2* product['price'],
        quantity=body['quantity'],
        status = "pending"
    )
    order.save()

    #executes a function in the background
    background_tasks.add_task(order_completed, order) #pass the parameter of the function as an argument in the background tast function

    return order

#below function executes in the background
def order_completed(order: Order):
    time.sleep(10) #gives payment processor time to finish the order
    order.status = 'completed'
    order.save()

#when an order is created we need to reduce the quantity in the inventory microservice and for this we use redis streams
# to send that  event between the two apis. Redis streams allows to communicate between two micros services without them knowing about each other

    #send event to redis strems
    redis.xadd('order_completed', order.dict(), '*') #pass a key to the function and the value, the star here is the id of the event and we use star so it is autogenerated